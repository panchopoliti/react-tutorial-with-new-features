{"version":3,"sources":["Modals/Modal.js","Modals/GridModal.js","Board.js","logicGameFunctions.js","Game.js","index.js"],"names":["Modal","props","closeModalOnKeyPress","ev","title","which","closeModal","closeSuccessModal","divToFocus","setDivFocus","element","focusDiv","focus","this","modalState","children","ref","tabIndex","className","onKeyDown","Component","GridModal","handleModal","successAction","focusModal","onClick","Square","winner","value","Board","i","squares","winnerSquares","key","includes","gridNumber","step","row","rowValues","push","renderSquare","calculateWinner","squaresGrid","winningInRows","lines","line","j","squareId","getWinningPatternsInRows","winningInColumns","getWinningPatternsInColumns","winningInDiagonals","forwardDiagonal","backwardDiagonal","getWinningPatternsInDiagonals","concat","length","lineToCheck","num","every","elem","arr","winnerTeam","Game","handleMovesToggle","setState","isAscending","state","restartGame","history","Array","fill","latestMovedSquare","stepNumber","xisNext","slice","prevProps","Boolean","gameHasStarted","setStartOfGame","status","current","winnerObj","moves","map","move","col","Math","floor","desc","jumpTo","reverse","handleClick","App","closeEveryModal","Object","keys","toggleModals","forEach","k","modalTitle","showingOverlay","closeModalWithSuccessBtn","inputValue","handleChange","modal","showWarningInputMessage","targetValue","target","gridModalClicked","intialGridNumber","assign","prevState","type","min","onChange","placeholder","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d6b64240.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './Modals.css';\n\nconst noop = () => {};\n\nclass Modal extends Component {\n  \n  constructor(props) {\n    super(props); \n\n    this.divToFocus = null;\n\n    this.setDivFocus = element => {\n      this.divToFocus = element;\n    };\n\n    this.focusDiv = () => {\n      this.divToFocus.focus();\n    };\n  }\n\n  componentDidUpdate() {\n\n    if (this.props.focusDiv) {\n\n      this.focusDiv();\n\n    }\n  }\n\n  closeModalOnKeyPress = (ev, title) => {\n    switch (ev.which) {\n      case 27: //ESC\n        return this.props.closeModal(ev, title);\n      case 13: //ENTER\n        return this.props.closeSuccessModal(ev, title);\n      default:\n        noop();\n    };\n\n  };\n\n  render() {\n\n    const { modalState, children, title } = this.props;\n\n    return (\n      <div ref={this.setDivFocus}\n           tabIndex={1} \n           className={`globalAlert ${(modalState) ? '' : 'hide'}`}\n           onKeyDown={(ev) => this.closeModalOnKeyPress(ev)}>\n        <div className='modalContainer'>\n          <div className='modalTextContainer'>\n            <span className='modalTitle'>{title}</span>\n          </div>\n          {children}\n        </div>\n      </div>\n      );\n  }\n}\n\nModal.propTypes = {\n  title: PropTypes.string,\n  modalState: PropTypes.bool.isRequired,\n  closeSuccessModal: PropTypes.func,\n  closeModal: PropTypes.func,\n  focusDiv: PropTypes.bool,\n};\n\nexport default Modal;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Modal from './Modal.js';\nimport './Modals.css';\n\nclass GridModal extends Component {\n\n  closeModal = (ev) => this.props.handleModal(ev, 'gridModalClicked');\n\n  closeSuccessModal = (ev) => this.props.successAction(ev, 'gridModalClicked');\n\n  render() {\n\n    const { modalState, focusModal } = this.props;\n\n    return (\n        <Modal modalState={modalState}\n             title='¿Está seguro que desea empezar una nueva partida?'\n             closeSuccessModal={this.closeSuccessModal}\n             closeModal={this.closeModal}\n             focusDiv={focusModal}\n             >  \n            <div className={'buttonsInModalContainer'}>\n                <div className={'alertButton buttonsInModal'} onClick={this.closeModal}>Cancelar</div>\n                <div className={'successButton buttonsInModal'} onClick={this.closeSuccessModal}>Aceptar</div>\n            </div>\n        </Modal>\n    )\n  }\n}\n\nGridModal.propTypes = {\n  modalState: PropTypes.bool.isRequired,\n  handleModal: PropTypes.func.isRequired,\n  successAction: PropTypes.func,\n  focusModal: PropTypes.bool,\n};\n\nexport default GridModal;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './index.css';\n\nfunction Square(props) {\n\n  \n\n    return (\n        <button className={`square ${(props.winner) ? 'highlight': ''}`} onClick={props.onClick}>\n            {props.value}\n        </button>\n    );\n}\n\nclass Board extends Component {\n\n  renderSquare(i) {\n    const { squares, onClick, winnerSquares } = this.props;\n\n    return (\n      <Square \n          key={i}\n          value={squares[i]}\n          winner={winnerSquares && winnerSquares.includes(i)}\n          onClick={() => onClick(i)}\n      />\n    );\n  }\n\n  render() {\n\n    const { gridNumber } = this.props;\n    let squares = [];\n\n    for (let step = 0; step < gridNumber; step++) {\n\n      let row = [];\n\n      for (let i = 0; i < gridNumber; i++) {\n        \n        const rowValues = gridNumber*step;\n\n        row.push(this.renderSquare(i+rowValues));\n\n      }\n    \n    squares.push(<div key={step} className=\"board-row\">{row}</div>)\n\n    }\n  \n    return (\n    <div>{ squares }</div>\n    );\n  }\n}\n\nBoard.propTypes = {\n    gridNumber: PropTypes.number,\n    onClick: PropTypes.func,\n    squares: PropTypes.array,\n    winnerSquares: PropTypes.array,\n};\n\nexport default Board;","function getWinningPatternsInColumns(squaresGrid) {\n    const lines = [];\n\n    for (let i = 0; i < squaresGrid; i++) {\n\n      const line = [];\n\n      for (let j = 0; j < squaresGrid; j++) {\n\n        const squareId = i+squaresGrid*j;\n        line.push(squareId);\n      }\n\n      lines.push(line);\n    } \n\n    return lines;\n  }\n\nfunction getWinningPatternsInRows(squaresGrid) {\nconst lines = [];\n\nfor (let i = 0; i < squaresGrid; i++) {\n\n    const line = [];\n\n    for (let j = 0; j < squaresGrid; j++) {\n\n    const squareId = i*squaresGrid+j;\n    line.push(squareId);\n    }\n\n    lines.push(line);\n} \n\nreturn lines;\n}\n\nfunction getWinningPatternsInDiagonals(squaresGrid) {\nconst forwardDiagonal = [];\nconst backwardDiagonal = [];\n\nfor (let i = 0; i < squaresGrid; i++) {\n    forwardDiagonal.push(i*squaresGrid+i);\n}\n\nfor (let i = 1; i <= squaresGrid; i++) {\n    backwardDiagonal.push(i*squaresGrid-i);\n}\n\nreturn [forwardDiagonal, backwardDiagonal];\n}\n\n\nexport function calculateWinner(squaresGrid, squares) {\n\nconst winningInRows = getWinningPatternsInRows(squaresGrid);\nconst winningInColumns = getWinningPatternsInColumns(squaresGrid);\nconst winningInDiagonals = getWinningPatternsInDiagonals(squaresGrid);\n\nconst lines = [].concat(winningInRows, winningInColumns, winningInDiagonals);\n\nfor (let i = 0; i < lines.length; i++) {\n\n    const lineToCheck = [];\n\n    for (const num of lines[i]) {\n    lineToCheck.push(squares[num]);\n    }\n\n    const allArrayIsEqual = lineToCheck.every((elem, i, arr) => elem === arr[0]);\n\n    if (allArrayIsEqual && lineToCheck[0] !== null) {\n\n      return {\n        winnerTeam: lineToCheck[0],\n        winnerSquares: lines[i],\n      };\n    }\n}\n\nif (!squares.includes(null)) {\n    return {\n      winnerTeam: 'TIE',\n      winnerSquares: null,\n    };\n}\n\nreturn {\n  winnerTeam: null,\n  winnerSquares: null,\n};;\n\n}\n\n  ","import React, { Component } from 'react';\nimport Board from './Board.js';\nimport PropTypes from 'prop-types';\nimport { calculateWinner } from './logicGameFunctions.js';\nimport './index.css';\n\n  \n  class Game extends Component {\n    constructor(props) {\n        super(props);\n\n        const { gridNumber } = this.props;\n\n        this.state = {\n            isAscending: true,\n            history: [{\n                squares: Array(gridNumber*gridNumber).fill(null),\n                latestMovedSquare: null,\n            }],\n            stepNumber: 0,\n            xisNext: true,\n        };\n    }\n\n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            xisNext: (step % 2) === 0,\n        });\n    };\n\n    handleClick(i) {\n        const { xisNext } = this.state;\n        const { gridNumber } = this.props;\n\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n\n        const winnerObj = calculateWinner(gridNumber, squares)\n\n        if (winnerObj.winnerTeam || squares[i]) {\n            return;\n        }\n\n        squares[i] = xisNext ? 'X' : 'O';\n        this.setState({ \n            history: history.concat([{ \n              squares,\n              latestMovedSquare: i,\n             }]),\n            stepNumber: history.length,\n            xisNext: !xisNext,\n         });\n    };\n\n    handleMovesToggle = () => this.setState({ isAscending: !this.state.isAscending });\n\n    restartGame = () => {\n\n        const { gridNumber } = this.props;\n\n      this.setState({\n        history: [{\n          squares: Array(gridNumber*gridNumber).fill(null),\n          latestMovedSquare: null,\n        }],\n        stepNumber: 0,\n        xisNext: true,\n       });\n    };\n\n    componentDidUpdate(prevProps) {\n\n        if (prevProps.gridNumber !== this.props.gridNumber) {\n\n            this.restartGame();\n        }\n\n        const gameInProcess = Boolean(this.state.stepNumber);\n\n        if (gameInProcess !== this.props.gameHasStarted) {\n\n            this.props.setStartOfGame();\n        }\n    }\n\n    render() {\n        const { xisNext, history, stepNumber, isAscending } = this.state;\n        const { gridNumber } = this.props;\n        \n        const current = history[stepNumber];\n        const winnerObj = calculateWinner(gridNumber, current.squares);\n\n        const moves = history.map((step, move) => {\n            const latestMovedSquare = step.latestMovedSquare;\n            const col = 1 + latestMovedSquare % gridNumber;\n            const row = 1 + Math.floor(latestMovedSquare / gridNumber);\n\n            const desc = move ?\n            `Go to Move # ${move} (${col};${row})` :\n            'Go to game start';\n            \n            return (\n            <li key={move}>\n                <button onClick={() => this.jumpTo(move)}>{ desc }</button>\n            </li>\n            );\n        });\n\n        if (!isAscending) {\n            moves.reverse();\n        }\n\n        let status;\n        const {winnerTeam, winnerSquares} = winnerObj;\n  \n        if (winnerTeam && winnerTeam !== 'TIE') {\n            status = `Winner is: ${winnerTeam}`;\n        } else if (winnerTeam === 'TIE') {\n          status = 'Match finished in Tie';\n        }\n         else {\n            status = `Next player: ${xisNext ? 'X' : 'O'}`;\n        }\n\n      return (\n        <div className=\"game\">\n          <div className=\"game-board\">\n            <Board \n                gridNumber={gridNumber}\n                squares={current.squares}\n                onClick={(i) => this.handleClick(i)}\n                winnerSquares={(winnerSquares) ? winnerSquares : []}\n            />\n          </div>\n          <div className=\"game-info\">\n            <div>{status}</div>\n            <ol>{moves}</ol>\n            <div>\n                <button onClick={this.handleMovesToggle}>{(isAscending) ? 'Order moves in Descending Way' : 'Order moves in Ascending way'}</button>\n            </div>\n          </div>\n        </div>\n      );\n    }\n  }\n  \n  Game.propTypes = {\n    gridNumber: PropTypes.number,\n    gameHasStarted: PropTypes.bool,\n    setStartOfGame: PropTypes.func, \n  };\n  \n  export default Game;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport GridModal from './Modals/GridModal.js';\nimport Game from './Game.js';\nimport './index.css';\n\n  \n  class App extends React.Component {\n    constructor(props) {\n        super(props);\n        \n        this.toggleModals = {\n          gridModalClicked: false,\n        };\n\n        this.state = {\n            gameHasStarted: false,\n            gridNumber: this.props.intialGridNumber,\n            showWarningInputMessage: false,\n            inputValue: '',\n            showingOverlay: false,\n            focusModal: false,\n        };\n\n        Object.assign(this.state, this.toggleModals);\n    }\n\n    componentDidUpdate (prevProps, prevState) {\n\n      if (this.state.gridModalClicked === false && prevState.gridModalClicked === true) {\n        this.setState({\n          inputValue: '',\n        })\n      }\n    };\n\n    setStartOfGame = () => this.setState({ gameHasStarted: !this.state.gameHasStarted});\n\n    closeEveryModal = () => {\n      Object.keys(this.toggleModals).forEach(k => {\n        \n        this.setState(() => ({\n         [k]: false,\n         showingOverlay: false,\n         focusModal: false,\n       }));\n  \n      });\n    };\n\n    handleModal = (ev, modalTitle ) => {\n\n      if (modalTitle === 'overlay') {\n        \n        this.closeEveryModal();\n\n      } else {\n\n        this.setState({\n          [modalTitle]: !this.state[modalTitle],\n          showingOverlay: !this.state.showingOverlay,\n          focusModal: !this.state.focusModal,\n        });\n\n      }\n    };\n\n    closeModalWithSuccessBtn = (ev, modalTitle) => {\n\n      this.setState({\n        gameHasStarted: false,\n        gridNumber: this.state.inputValue,\n      });\n      this.handleModal(ev, modalTitle);\n\n    };\n\n    handleChange = (ev, modal) => {\n\n      const { gridNumber, showWarningInputMessage, gameHasStarted } = this.state;\n      const targetValue = +ev.target.value;\n\n      this.setState({ \n        inputValue: targetValue || '',\n       });\n\n      if (!targetValue || targetValue === gridNumber ) return;\n      \n      if (targetValue < 3 || targetValue > 7) {\n        \n        this.setState({\n          showWarningInputMessage: true,\n        })\n\n        return;\n      } else if (showWarningInputMessage) {\n        this.setState({\n          showWarningInputMessage: false,\n        })\n      }\n\n      if (gameHasStarted && targetValue !== gridNumber) {\n        this.handleModal(ev, modal);\n\n        return;\n      }\n\n      this.setState({ gridNumber: targetValue});\n    }\n\n    render() {\n        const { \n          gridNumber,\n          showWarningInputMessage, \n          gridModalClicked,\n          showingOverlay,\n          focusModal,\n          inputValue,\n          gameHasStarted,\n        } = this.state;\n\n      return (\n        <div className='main-container'>\n          <div onClick={(ev) => this.handleModal(ev, 'overlay')}className={(showingOverlay) ? 'overlay' : ''}></div>\n          <Game \n          gridNumber={gridNumber}\n          gameHasStarted={gameHasStarted}\n          setStartOfGame={this.setStartOfGame}\n           />\n          <div className=\"input-squares-container\">\n            <input \n              className=\"input-squares\"\n              type=\"number\"\n              min='0'\n              step='1' \n              onChange={(ev) => this.handleChange(ev, 'gridModalClicked')}\n              value={inputValue} \n              placeholder={this.state.gridNumber}/>\n              <span className={`danger-span ${(showWarningInputMessage) ? '' : 'hide'}`}>Numbers are allowed from 3 to 7</span>\n              <GridModal \n              modalState={gridModalClicked}\n              handleModal={this.handleModal}\n              successAction={this.closeModalWithSuccessBtn}\n              focusModal={focusModal}\n              />\n          </div>\n        </div>\n      );\n    }\n  }\n\n  App.propTypes = {\n    initialGridNumber: PropTypes.number,\n  };\n  \n  \n  // ========================================\n  // Read about control components and pure components and react terms\n  // Chequear código antes de subir a GitHub\n  // Dataset en html\n  // Ejercicios React\n  // \n  \n  ReactDOM.render(\n    <App intialGridNumber={3}/>,\n    document.getElementById('root')\n  );"],"sourceRoot":""}